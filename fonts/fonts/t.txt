
alt+` = toggle terminus
type -> "conda" then activate base env using "activate base".
type -> write "cmd" in powershell to convert it to cmd
type -> write conda to convert cmd to anaconda prompt
type -> "python -m jupyterlab" for opening jupyterlab
type -> "python -m jupyter notebook" for opening jupyter notebook
ctrl+w -> inchrome it colses current tab in sublime it closes terminus
ctrl+shift+t -> opens closed tab both in chrome and sublime
"subl ." -> opens sublime in that dir
ctrl+shift+o -> opoen folder
ctrl+d -> multi curser
alt+shift+2 -> devide in 2 columns
alt+shift+3 -> devide in 3 columns
alt+1 -> opens cmd in terminus
alt+2-> opoens git in terminus
ctrl+win+d -> opens new desktop
ctrl+win+left/right arrow -> switch desktop
ctrl+win+f4 -> remove desktop
ctrl+shift+ up/down arrow -> move multiple lines up or down


============================================================================
A weird message is popping up while exercising any `jupyter` command via the anaconda prompt. 
I was trying to install a jupyterlab extension. here u can see I tried different `jupyterlab`  commands but ut was always the same. I have opened an issue on this too 
http://bit.ly/jlissue

@ProjectJupyter 
============================================================================
settngs
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
{
    "auto_formatting": true,
    "autoformat_ignore":
    [
    ],
    "pep8_ignore":
    [
        "E501"
    ],
    "anaconda_linter_underlines": false,
    "anaconda_linter_mark_style": "none",
    "display_signatures": false,
    "disable_anaconda_completion": false,
    "python_interpreter": "C:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python37",
    "complete_parameters": false,
    "complete_all_parameters": false,
}
=====================================================================
keys
+++++++++++++++
[
    {
    	"keys": ["ctrl+alt+b"], "command": "run_existing_window_command", "args":
    		{
        		"id": "repl_python_run",
        		"file": "config/Python/Main.sublime-menu"
    		}
    },
    { "keys": ["ctrl+shift+s"], "command": "auto_save" },

    ///////////////////////////////////////////////////////////
//           Jam-Es.com
//////////////////////////////////////////////////////////



    // Togle Terminus panel (at the bottom of the screen) Open/Closed when Alt+' is pressed
    {
        // The key press to look out for
        "keys": ["alt+`"],

        // Toggle the panel
        "command": "toggle_terminus_panel"
    },

    // Open cmd.exe Command Prompt when Alt+1 is pressed
    {
        // The key press to look out for
        "keys": ["alt+1"],

        // Tell terminus to open something
        "command": "terminus_open",

        // Tell terminus what to open
        "args" : {
            // Open Command Prompt
            "cmd": "cmd.exe",

            // Provide Command Prompt with Current Working Directory
            "cwd": "${file_path:${folder}}",

            // Tell terminus to put it in the panel at the bottom of the screen
            "panel_name": "Terminus"
        }
    },

    // Open git bash when Alt+2 is pressed
    {
        "keys": ["alt+2"],
        "command": "terminus_open",
         "args" : {
            // Tell terminus to use Git Bash
            // Replace the path below with your path to Git Bash
            "cmd": ["C:\\Program Files\\Git\\bin\\bash.exe", "-i", "-l"],

            "cwd": "${file_path:${folder}}",
            "panel_name": "Terminus"
         }
    },
    // // Open conda bash when Alt+2 is pressed
    // {
    //     "keys": ["alt+3"],
    //     "command": "terminus_open",
    //      "args" : {
    //         // Tell terminus to use Git Bash
    //         // Replace the path below with your path to Git Bash
    //         "cmd": ["D:\\Users\\USER\\Anaconda3\\Scripts\\conda.exe", "-i", "-l"],

    //         "cwd": "${file_path:${folder}}",
    //         "panel_name": "Terminus"
    //      }
    // },

    // Repitition of the above adding Alt+c and Alt+b shortcuts
    {
        "keys": ["alt+c"],
        "command": "terminus_open",
        "args" : {
            "cmd": "cmd.exe",
            "cwd": "${file_path:${folder}}",
            "title": "Command Prompt",
            "panel_name": "Terminus"
        }
    },
    {
        "keys": ["alt+b"],
        "command": "terminus_open",
         "args" : {
            "cmd": ["C:\\Program Files\\Git\\bin\\bash.exe", "-i", "-l"],
            "cwd": "${file_path:${folder}}",
            "title": "Git Bash",
            "panel_name": "Terminus"
         }
    },
    {
    "keys": ["ctrl+w"], "command": "terminus_close", "context": [{ "key": "terminus_view"}]
    },
    {
        "keys": ["ctrl+alt+t"],
        "command": "terminus_open",
        "args": {
            "post_window_hooks": [
                ["carry_file_to_pane", {"direction": "down"}]
            ]
        }
    }


]
===========================================================================
#include <stdio.h> 
#include <string.h>

int isArraySorted(int s[],int n){
  int a=1,d=1,i=0;
  while((a==1||d==1)&& i<n-1){
    if(s[i]<s[i+1]){
      d=0;
    }
    else if(s[i]>s[i+1]){
      a=0;
    }
    i++;
  }
  if(a==1){
    return 1;
  }
  else if(d==1){
    return 2;
  }
  else{
    return 0;
  }
}

void ArithGeo(int arr[], int arrLength) {
  // 1=ar,2=geo,3,none
  // code goes here  
  // printf("%d", arr[0]);
  int what;
  int ratio = arr[1]/(arr[0]);
  int d = arr[1]-arr[0];
  // if(arrLength==1){
  //   what=1;
  // }
  // int r = isArraySorted(arr,arrLength);
  // if(r==0){
  //   what =-1;
  // }
  for(int i=2;i<arrLength;i++){
    if(arr[i]-arr[i-1]!=d){
      what =2;
    }
    else{
      what=1;
    }
  }
  for(int i=2;i<arrLength;i++){
    if(arr[i]-arr[i-1]!=d){
      if((arr[i]/(arr[i-1]))!=ratio){
        what =-1;
      }
    }
    else{
      what=1;
    }
  }
  if(what ==2){
    for(int i=1;i<arrLength;i++){
      if((arr[i]/(arr[i-1]))!=ratio){
        what =-1;
      }
      else{
        what=2;
      }
    }
  }

  if(what==1){
    printf("Arithmetic");
  }
  else if(what==2){
    printf("Geometric");
  }
  else{
    printf("-1");
  }

  

}

int main(void) { 
   
  // keep this function call here
  int A[] = coderbyteInternalStdinFunction(stdin);
  int arrLength = sizeof(A) / sizeof(*A);
  ArithGeo(A, arrLength);
  return 0;
    
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include <stdio.h> 
#include <string.h>
int large(int arr[],int n){
  int i;
  int max=arr[0];
  for(i = 1;i<n;i++){
    if(arr[i]>max){
      max=arr[i];
    }
  }
  return max;
}
void ArrayAdditionI(int arr[], int arrLength) {
  
  int sum=0;
  // code goes here  
  // printf("%d", arr[0]);
  int max = large(arr,arrLength);
  for(int i=0;i<=arrLength;i++){
    if (arr[i]==max){
      arr[i]=0;
    }
  }
  for(int i=0;i<=arrLength;i++){
    sum = sum+arr[i];

  }
  if(sum==max){
    printf("true");

  }
  else{
    printf("false");
  }


}

int main(void) { 
   
  // keep this function call here
  int A[] = coderbyteInternalStdinFunction(stdin);
  int arrLength = sizeof(A) / sizeof(*A);
  ArrayAdditionI(A, arrLength);
  return 0;
    
}
arraradd

+++++++++++++++++++
